
🧩 thumbnail?.url ?? '/images/noimage.png' の書き方の理由

このコードは optional chaining (?.) と 


nullish coalescing (??) を使った 安全な fallback 表現 です。



🛡️ 安全性と柔軟性を両立する意図：

- thumbnail?.url は thumbnail が undefined や null の場合でも、エラーを出さずに undefined を返します。

- ?? '/images/noimage.png' はその結果が null または undefined なら、

デフォルト画像 '/images/noimage.png' を使います。

つまり...
| 状況 | 結果 | 

| thumbnail が存在し、thumbnail.url もある | その URL を使う | 

| thumbnail がない、または url が未定義 | /images/noimage.png を使う | 

| thumbnail はあるけど url は空文字列（''） | 空文字を使う（注意が必要） |
 


💭 なぜ image?.url は使われてないの？
Props に image もありますが、thumbnail の方を表示に使っている理由は、設計による区別かもしれません：

- image は高解像度版・詳細ビューで使う可能性がある

- thumbnail はカード内表示の小さな画像用

- UI設計上、読み込み高速化やレイアウト最適化のために thumbnail 

必要があれば image?.url を fallback に含めることも可能です。例えば：
<img
  src={thumbnail?.url ?? image?.url ?? '/images/noimage.png'}
  alt={`${name}のイメージ`}
/>



💡 ??（Nullish Coalescing）

と ?（Optional Chaining）


の違い


どちらも 安全なコードを書くための構文ですが、目的が微妙に違います。

例付きで説明します👇

🧷 ?（Optional Chaining）
これは「プロパティを安全にたどる」ための構文です。
const thumbnailUrl = thumbnail?.url;


- thumbnail が undefined や null でも、エラーにならず undefined を返してくれる。

- 通常なら thumbnail.url は thumbnail がなければクラッシュするけど、それを防げる。

🧠 使う場面：
- thumbnail が存在しない可能性があるとき。
- ネストされたデータを安全に読むとき。

🎯 ??（Nullish Coalescing）

これは「値が null または undefined なら、デフォルト値を使う」という処理です。
const imageUrl = thumbnail?.url ?? '/images/noimage.png';


- 左側（thumbnail?.url）の結果が null または undefined のとき、右側（'/images/noimage.png'）を返す。
- false や ''（空文字） は左側として扱われる！（つまりそのまま使われる）
🧠 使う場面：
- 値がなければ代替値を指定したいとき。
- 0 や false は「値アリ」として認識したいとき。

📌 違いのまとめ
| 記号 | 名前 | 目的 | 例 | 結果 | 
| ?. | Optional Chaining | ネストされた値の安全なアクセス | obj?.a?.b | 存在すれば値、なければ undefined | 
| ?? | Nullish Coalescing | fallback値の指定 | value ?? 'default' | value が null/undefined なら 'default' | 
